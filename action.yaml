---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# chartmuseum-action
name: "‚ò∏Ô∏è ChartMuseum Container"
description: "Starts and runs a ChartMuseum Helm Chart repository"

inputs:
  # Note: type definitions are not supported in composite actions
  # preserve here for documentation purposes
  # IMPORTANT: Boolean inputs are provided as strings ('true'/'false')
  # due to composite actions limitations
  # Mandatory
  password:
    description: "Password to access ChartMuseum service"
    required: true
    # type: 'string'
  # Optional
  username:
    description: "Username to access ChartMuseum service"
    required: false
    # type: 'string'
    default: 'chartmuseum'
  port:
    description: "TCP port on which server will listen"
    required: false
    # type: 'string'
    default: '8080'
  directory:
    description: "Directory path to host Helm Charts"
    required: false
    # type: 'string'
    default: 'charts'
  script:
    # This is essentially a job; when finished the container will quit
    description: "Shell code to execute against container"
    required: false
    # type: 'string'
  exec_time:
    # In the absence of a script/job, run container for a fixed time
    # Testing aid to help workflow development; not for production use
    description: "Background container/service execution time"
    required: false
    # type: 'string'
    default: '120'
  version:
    description: "ghcr.io/helm/chartmuseum container version"
    required: false
    # type: 'string'
    default: 'v0.16.3'
  purge_charts:
    description: "Purges any previous charts content at server startup"
    required: false
    # type: 'boolean'
    default: 'false'
  exit:
    description: "Terminates the background container when the job completes"
    required: false
    # type: 'boolean'
    default: 'true'
  check_service:
    description: "Validates service availability after startup"
    required: false
    # type: 'boolean'
    default: 'true'
  debug:
    description: "Enables Docker container debugging"
    required: false
    # type: 'boolean'
    default: 'false'
  enable_cache:
    description: "Enable Docker layer and dependency caching for faster builds"
    required: false
    # type: 'boolean'
    default: 'true'
  cache_key_suffix:
    description: "Additional suffix for cache keys to allow cache isolation"
    required: false
    # type: 'string'
    default: ''
  helm_repo_name:
    description: 'Sets up Chartmuseum as a named helm repository'
    required: false
    # Disable by setting to empty string in calling workflow
    default: 'chartmuseum'
    # type: 'string'

outputs:
  cid:
    description: "Running container ID"
    value: ${{ steps.chartmuseum.outputs.cid }}
  container_ip:
    description: "IP address of the running container"
    value: ${{ steps.chartmuseum.outputs.container_ip }}

runs:
  using: "composite"
  steps:
    - name: 'Setup action/environment'
      shell: bash
      run: |
        # Setup action/environment

        # Validate action inputs
        if [ -z "${{ inputs.password }}" ]; then
          echo "Error: password is a mandatory input ‚ùå"
          exit 1
        fi
        if ! [[ "${{ inputs.port }}" =~ ^[0-9]+$ ]]; then
          echo "Error: provided port must be a valid number ‚ùå"
          exit 1
        fi
        if ! [[ "${{ inputs.exec_time }}" =~ ^[0-9]+$ ]]; then
          echo "Error: Execution time must be a positive integer ‚ùå"
          exit 1
        fi
        if [ ! -d "${{ inputs.directory }}" ]; then
          echo "Creating local charts folder: ${{ inputs.directory }}"
          mkdir "${{ inputs.directory }}"
          chmod a+wr "${{ inputs.directory }}"
        fi

        echo "# ChartMuseum Action ‚ò∏Ô∏è" >> "$GITHUB_STEP_SUMMARY"
        if [ "${{ inputs.enable_cache }}" = "true" ]; then
          echo "**Caching enabled** ‚úÖ" >> "$GITHUB_STEP_SUMMARY"
          # Only show cache key suffix if it's not empty/default
          if [ -n "${{ inputs.cache_key_suffix }}" ]; then
            echo "- Cache key suffix: \`${{ inputs.cache_key_suffix }}\`" \
              >> "$GITHUB_STEP_SUMMARY"
          fi
        else
          echo "**Caching Status**: ‚ùå Disabled" >> "$GITHUB_STEP_SUMMARY"
        fi
        if [ "${{ inputs.purge_charts }}" = 'true' ] && \
          [ -d "${{ inputs.directory }}" ]; then
          echo "Purging charts folder: ${{ inputs.directory }} ‚ö†Ô∏è" \
            >> "$GITHUB_STEP_SUMMARY"
          echo "Purging charts folder: ${{ inputs.directory }} ‚ö†Ô∏è"
          rm -Rf "${{ inputs.directory }}/**"
        fi

    # Enhanced Docker Buildx with caching support
    - name: 'Docker Buildx'
      # yamllint disable-line rule:line-length
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        version: latest
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    # Cache Docker layers for faster subsequent builds
    - name: 'Cache Docker layers'
      if: inputs.enable_cache == 'true'
      # yamllint disable-line rule:line-length
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: /tmp/.buildx-cache
        # yamllint disable-line rule:line-length
        key: chartmuseum-docker-${{ runner.os }}-${{ inputs.version }}${{ inputs.cache_key_suffix }}
        restore-keys: |
          chartmuseum-docker-${{ runner.os }}-${{ inputs.version }}
          chartmuseum-docker-${{ runner.os }}-
          chartmuseum-docker-

    # Pre-pull and cache the ChartMuseum Docker image
    - name: 'Pre-pull ChartMuseum image'
      if: inputs.enable_cache == 'true'
      shell: bash
      run: |
        # Pre-pull ChartMuseum image for caching
        echo "Pulling image: ghcr.io/helm/chartmuseum:${{ inputs.version }}"
        docker pull ghcr.io/helm/chartmuseum:${{ inputs.version }} || {
          echo "Warning: Failed to pre-pull image, will attempt during run"
        }

    - name: 'Start ChartMuseum'
      id: chartmuseum
      shell: bash
      run: |
        # Start ChartMuseum
        # Configure Docker to use cache-from for faster container starts
        export DOCKER_BUILDKIT=1

        echo "Starting ChartMuseum..."
        docker run -d --name chartmuseum --cidfile /tmp/chartmuseum.cid --rm \
          -p ${{ inputs.port }}:${{ inputs.port }} \
          -e DOCKER_BUILDKIT=1 \
          -e DEBUG=${{ inputs.debug }} \
          -e DISABLE_API=false \
          -e BASIC_AUTH_USER=${{ inputs.username }} \
          -e BASIC_AUTH_PASS=${{ inputs.password }} \
          -e STORAGE=local \
          -e STORAGE_LOCAL_ROOTDIR=/${{ inputs.directory }} \
          -e PORT=${{ inputs.port }} \
          -v "$(pwd)/${{ inputs.directory }}":/${{ inputs.directory }}:rw \
          --pull=missing \
            ghcr.io/helm/chartmuseum:${{ inputs.version }} || {
            echo "Error: failed to start ChartMuseum container ‚ùå"
            exit 1
          }

        # Capture container ID and IP address
        cid=$(cat /tmp/chartmuseum.cid)
        container_ip=$(docker inspect -f \
          '{{.NetworkSettings.IPAddress}}' chartmuseum)

        echo "cid=$cid" >> "$GITHUB_ENV"
        echo "cid=$cid" >> "$GITHUB_OUTPUT"
        echo "container_ip=$container_ip" >> "$GITHUB_ENV"
        echo "container_ip=$container_ip" >> "$GITHUB_OUTPUT"

        echo "ChartMuseum Container ‚ò∏Ô∏è"
        echo "IP address: $container_ip"
        echo "Port: ${{ inputs.port }}"
        echo "Directory: ${{ inputs.directory }}"
        echo "Version: ${{ inputs.version }}"
        echo "Debug mode: ${{ inputs.debug }}"
        echo "Docker container status üí¨"
        docker ps -f name=chartmuseum
        echo "Helm Repositories:"
        helm repo list || true

    # Do NOT replace this availability check with a simple cURL command
    - name: "Check service availability"
      if: inputs.check_service == 'true'
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/http-api-tool-docker@4323ea0e0488742127eb6acef7a650ebca7924b9 # Latest
      with:
        url: "http://${{ env.container_ip}}:${{ inputs.port }}/health"
        auth_string: "${{ inputs.username }}:${{ inputs.password }}"
        service_name: 'ChartMuseum'
        expected_http_code: '200'
        retries: '5'
        initial_sleep_time: '2'
        curl_timeout: '10'
        max_response_time: '5'
        debug: "${{ inputs.debug }}"

    - name: "Adding Chartmuseum Helm repository: ${{ inputs.helm_repo_name }}"
      if: inputs.helm_repo_name != ''
      shell: bash
      run: |
        # Add as named Helm repository
        helm repo add "${{ inputs.helm_repo_name }}" \
          "http://${{ env.container_ip }}:${{ inputs.port }}" \
          --username "${{ inputs.username }}" \
          --password "${{ inputs.password }}"
        helm repo update
        echo "Added as Helm repository: ${{ inputs.helm_repo_name }}" \
          >> "$GITHUB_STEP_SUMMARY"
        echo "Added as Helm repository: ${{ inputs.helm_repo_name }}"
        echo "Listing Helm repositories ‚ò∏Ô∏è"
        helm repo list

    - name: "Running ChartMuseum for: ${{ inputs.exec_time }}s"
      if: inputs.script == '' && inputs.exit == 'true'
      shell: bash
      run: |
        # Run ChartMuseum
        echo "Running ChartMuseum service for: ${{ inputs.exec_time }}s ‚ò∏Ô∏è" \
          >> "$GITHUB_STEP_SUMMARY"
        sleep "${{ inputs.exec_time }}"

    - name: "Executing ChartMuseum script/job"
      if: inputs.script != ''
      shell: bash
      run: |
        # Executing ChartMuseum script/job
        if [ -x "${{ inputs.script }}" ]; then
          echo "Executing script: ${{ inputs.script }} ‚ò∏Ô∏è" \
            >> "$GITHUB_STEP_SUMMARY"
          echo "Executing script: ${{ inputs.script }} ‚ò∏Ô∏è"
          # Export container ID as environment variable for the script
          export cid="${{ env.cid }}"
          "./${{ inputs.script }}" "${{ inputs.password }}"
        else
          echo "Error: script/job path was not executable ‚ùå" \
            >> "$GITHUB_STEP_SUMMARY"
          echo "Error: script/job path was not executable ‚ùå"
          echo "Running: docker kill ${{ env.cid }}"
          timeout 30 docker kill "${{ env.cid }}"
          # Clean up container ID file after termination
          rm -f /tmp/chartmuseum.cid
          echo "Terminated Chartmuseum Container üõë"
          exit 1
        fi

    - name: "Terminate container when finished"
      if: inputs.exit == 'true'
      shell: bash
      run: |
        # Terminate container when finished with cache preservation
        echo "Running: docker kill ${{ env.cid }}"
        timeout 30 docker kill "${{ env.cid }}"
        echo "Terminated Chartmuseum Container üõë"

        # Clean up container ID file after termination
        rm -f /tmp/chartmuseum.cid

        # Preserve Docker layers in cache for next run
        if [ "${{ inputs.enable_cache }}" = "true" ]; then
          echo "Preserving Docker layers in cache for faster subsequent runs"
          docker system prune -f --filter "until=24h" \
            --filter "label!=keep-cache" || true
        fi

    - name: "Container will continue/persist"
      if: inputs.exit != 'true'
      shell: bash
      run: |
        # Container will continue/persist
        echo "Container has detached and will continue/persist" \
          >> "$GITHUB_STEP_SUMMARY"
        echo "Container has detached and will continue/persist"
