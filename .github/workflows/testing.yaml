---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Action test/validation workflow
name: 'Test GitHub Action üß™'

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

permissions: {}

jobs:
  ### Test the GitHub Action in this Repository ###
  tests:
    name: 'Test local GitHub Action'
    runs-on: 'ubuntu-24.04'
    permissions:
      contents: read
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 'Create local job to execute'
        shell: bash
        run: |
          # Create local job to execute
          touch job.sh
          chmod a+x job.sh
          echo 'echo "ChartMuseum job from: testing.yaml üß™"' >> job.sh

      - name: "Running local action: ${{ github.repository }} [Run script]"
        uses: ./
        with:
          password: "${{ secrets.github_token }}"
          port: 8080
          script: 'job.sh'

      - name: "Running local action: ${{ github.repository }} [Run for 15s]"
        uses: ./
        with:
          password: "${{ secrets.github_token }}"
          port: 8080
          exec_time: 15

      - name: "Running local action: ${{ github.repository }} [Failure test]"
        uses: ./
        id: failure
        with:
          password: "${{ secrets.github_token }}"
          port: 8080
          debug: true
          script: 'garbage-path.sh'
        continue-on-error: true

      - name: "Validate previous step failure"
        if: steps.failure.outcome == 'success'
        shell: bash
        run: |
          # Validate previous step failure
          echo "Error: previous step should have failed ‚ùå"
          exit 1

      - name: "Running local action: ${{ github.repository }} [Run script]"
        uses: ./
        with:
          password: "${{ secrets.github_token }}"
          port: 8080
          purge_charts: true
          script: 'job.sh'
          # Should not cleanup container when job completes
          exit: false

      - name: "Verify background container still running"
        shell: bash
        run: |
          # Verify background container still running
          if [ -f /tmp/chartmuseum.cid ]; then
            CONTAINER_ID=$(cat /tmp/chartmuseum.cid)
            echo "Container ID from file: $CONTAINER_ID"
          fi
          if ! docker ps --no-trunc | grep "$CONTAINER_ID"; then
            echo "Error: container should still be running ‚ùå"
            exit 1
          fi
